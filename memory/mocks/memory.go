// Code generated by MockGen. DO NOT EDIT.
// Source: memory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	engines "github.com/natexcvi/go-llm/engines"
)

// MockMemory is a mock of Memory interface.
type MockMemory struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryMockRecorder
}

// MockMemoryMockRecorder is the mock recorder for MockMemory.
type MockMemoryMockRecorder struct {
	mock *MockMemory
}

// NewMockMemory creates a new mock instance.
func NewMockMemory(ctrl *gomock.Controller) *MockMemory {
	mock := &MockMemory{ctrl: ctrl}
	mock.recorder = &MockMemoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemory) EXPECT() *MockMemoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockMemory) Add(msg *engines.ChatMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockMemoryMockRecorder) Add(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMemory)(nil).Add), msg)
}

// AddPrompt mocks base method.
func (m *MockMemory) AddPrompt(prompt *engines.ChatPrompt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPrompt", prompt)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPrompt indicates an expected call of AddPrompt.
func (mr *MockMemoryMockRecorder) AddPrompt(prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrompt", reflect.TypeOf((*MockMemory)(nil).AddPrompt), prompt)
}

// PromptWithContext mocks base method.
func (m *MockMemory) PromptWithContext(nextMessages ...*engines.ChatMessage) (*engines.ChatPrompt, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range nextMessages {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PromptWithContext", varargs...)
	ret0, _ := ret[0].(*engines.ChatPrompt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptWithContext indicates an expected call of PromptWithContext.
func (mr *MockMemoryMockRecorder) PromptWithContext(nextMessages ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptWithContext", reflect.TypeOf((*MockMemory)(nil).PromptWithContext), nextMessages...)
}
